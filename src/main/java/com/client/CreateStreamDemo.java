package com.client;

import static org.junit.Assert.assertEquals;

import java.util.Arrays;
import java.util.List;
import java.util.regex.Pattern;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import org.junit.Test;

//Create a stream
public class CreateStreamDemo {

	@Test
	public void test1() {
		Stream<Integer> s = Stream.of(1, 2, 3);
		assertEquals(3, s.count());
	}

	@Test
	public void test2() {
		IntStream s = IntStream.of(1, 2, 3);
		assertEquals(3, s.count());
	}

	@Test
	public void test3() {
		int[] arr = { 1, 2, 3 };
		IntStream s = Arrays.stream(arr);
		assertEquals(3, s.count());
	}

	@Test
	public void test4() {
		IntStream s = Arrays.stream(new int[] { 1, 2, 3 });
		assertEquals(3, s.count());
	}

	// Autoboxing not supported in streams
	/*
	 * @Test public void test5() { Stream<Integer> s=Arrays.stream(new int[]
	 * {1,2,3}); assertEquals(3, s.count()); }
	 */

	@Test
	public void test6() {
		Stream<Integer> s = Arrays.asList(1, 2, 3, 4).stream();
		assertEquals(4, s.count());
	}

	/*
	 * Stream generate(Supplier<T> s) returns an infinite sequential unordered
	 * stream where each element is generated by the provided Supplier. This is
	 * suitable for generating constant streams, streams of random elements, etc.
	 */
	@Test
	public void test7() {
		Stream<Double> s = Stream.generate(() -> Math.random() * 1000).limit(3);
		assertEquals(3, s.count());

	}

	@Test
	public void test8() {
		Stream<Integer> s = Stream.iterate(1, x -> x < 12, x -> x + 2);
		assertEquals(6, s.count());

	}

	@Test
	public void test9() {
		IntStream s = "Payal".chars().peek(System.out::println);
		assertEquals(5, s.count());

	}

	@Test
	public void test10() {
		IntStream s = IntStream.range(1, 5);
		assertEquals(4, s.count());

	}

	@Test
	public void test11() {
		IntStream s = IntStream.rangeClosed(1, 5);
		assertEquals(5, s.count());

	}
	
	@Test
	public void test12() {
		List<Integer> list= null;
		Stream<Integer> s = (list==null|| list.isEmpty())?Stream.empty():list.stream();
		assertEquals(0, s.count());
	}
	
	@Test
	public void test13() {
	Stream<String> stream=Stream.<String>builder().add("apple").add("orange").build();
	assertEquals(2, stream.count());
	}
	
	@Test
	public void test14() {
	Stream<String> stream= Pattern.compile(", ").splitAsStream("a, b, c");
	assertEquals(3, stream.count());
	}
}
